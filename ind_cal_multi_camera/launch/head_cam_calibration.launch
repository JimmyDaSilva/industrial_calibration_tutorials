<?xml version="1.0" ?>
<launch>

  <arg name="cam_model" default="$(find ind_cal_multi_camera)/urdf/head_cam.urdf.xacro" />
  <arg name="robot" default="head_cam"/>
  <arg name="use_gui" default="true"/>

  <!-- Load the xacro file of the tower and cameras onto the parameter server as a robot description -->
  <param name="$(arg robot)/robot_description" command="$(find xacro)/xacro.py $(arg cam_model)" />

  <!-- Launch robot state publishers for both towers -->
  <node ns="$(arg robot)" name="camera_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
      <param name="publish_frequency" value="50" />
  </node>

  <!-- Run the head_cam -->
  <include file="$(find lwr_peg_in_hole)/launch/kuka_cam.launch" />


  <node pkg="tf" type="static_transform_publisher" name="pub_target_frame" args="0.316 0.1025 0 3.1416 0 0 /base_link /target_frame 100" output="screen" />

  <!-- Launch service which when called will move robot and then indicate scene is ready   -->
  <node pkg="industrial_extrinsic_cal" type="camera_observer_scene_trigger" name="observer_trigger" output="screen" >
      <param name="target_type" value="0" />
      <param name="pattern_rows" value="8" />
      <param name="pattern_cols" value="6" />
  </node>

  <!-- Launch the extrinsic calibration service -->
  <node pkg="industrial_extrinsic_cal" type="service_node" name="calibration_service_node" output="screen" >
    <param name="yaml_file_path" value="$(find ind_cal_multi_camera)/yaml/" />
    <rosparam>
      camera_file: "head_cam_cameras.yaml"
      target_file: "head_cam_targets.yaml"
      cal_job_file: "head_cam_caljob.yaml"
      store_results_package_name: "ind_cal_multi_camera"
      store_results_file_name: "head_cam_transform_new.launch"
    </rosparam>
  </node>

  <node name="head_cam_loc" pkg="industrial_extrinsic_cal" type="mutable_joint_state_publisher" >
    <param name="mutable_joint_state_yaml_file" value="$(find ind_cal_multi_camera)/yaml/head_cam_mutable_joint_states.yaml" />
    <remap from="mutable_joint_states" to="$(arg robot)/joint_states" />
  </node>

  <node if="$(arg use_gui)" name="cal_gui" pkg="calibrate_gui" type="calibrate_gui" />

</launch>
